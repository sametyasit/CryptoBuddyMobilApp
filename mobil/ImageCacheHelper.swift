import Foundation
import UIKit
import SwiftUI

/// Logo Ã¶nbellekleme iÃ§in global helper - tÃ¼m uygulamadan eriÅŸim iÃ§in
let imageCacheHelper = ImageCacheHelperImpl()

/// Logo yÃ¼kleme ve Ã¶nbellekleme iÃ§in yardÄ±mcÄ± sÄ±nÄ±f
class ImageCacheHelperImpl {
    /// Coin logolarÄ±nÄ± toplu olarak Ã¶nbelleÄŸe alma
    /// - Parameter coins: Ã–nbelleÄŸe alÄ±nacak coinler
    func preloadCoinLogos(for coins: [Coin]) {
        // Ä°lk 50 coini Ã¶nbelleÄŸe al - kullanÄ±cÄ± deneyimini iyileÅŸtirmek iÃ§in
        let topCoins = Array(coins.prefix(50))
        
        print("ğŸ“± Logo Ã¶nbelleÄŸe alma baÅŸlatÄ±lÄ±yor - \(topCoins.count) coin iÃ§in")
        
        // DÃ¼ÅŸÃ¼k Ã¶ncelikli bir kuyrukta arkaplanda yÃ¼kle
        DispatchQueue.global(qos: .utility).async { [weak self] in
            guard let self = self else { return }
            
            for coin in topCoins {
                // LogolarÄ± yÃ¼klerken bir dizi farklÄ± olasÄ± URL'yi dene
                let possibleURLs = [
                    coin.image, // Ana URL
                    "https://assets.coingecko.com/coins/images/\(coin.id)/small/\(coin.symbol.lowercased()).png",
                    "https://s2.coinmarketcap.com/static/img/coins/64x64/\(coin.id).png",
                    "https://raw.githubusercontent.com/spothq/cryptocurrency-icons/master/32/color/\(coin.symbol.lowercased()).png"
                ]
                
                // Her coin iÃ§in bir kez baÅŸarÄ±lÄ± olunca diÄŸerine geÃ§
                var logoLoaded = false
                
                for urlString in possibleURLs where !logoLoaded {
                    // BoÅŸ veya geÃ§ersiz URL'leri atla
                    guard !urlString.isEmpty, let url = URL(string: urlString) else { continue }
                    
                    // Ã–nbellek anahtarÄ±
                    let cacheKey = "\(coin.id)_\(coin.symbol)_logo"
                    
                    // Zaten Ã¶nbellekte var mÄ± kontrol et
                    if ImageCache.shared.getImage(forKey: cacheKey) != nil {
                        logoLoaded = true
                        break
                    }
                    
                    // DeÄŸilse, indir ve Ã¶nbelleÄŸe al
                    let semaphore = DispatchSemaphore(value: 0)
                    
                    let task = URLSession.shared.dataTask(with: url) { data, response, error in
                        if let data = data, let image = UIImage(data: data) {
                            // BaÅŸarÄ±lÄ± yÃ¼klemeyi Ã¶nbelleÄŸe kaydet
                            ImageCache.shared.setImage(image, forKey: cacheKey)
                            logoLoaded = true
                        }
                        semaphore.signal()
                    }
                    
                    task.resume()
                    
                    // En fazla 2 saniye bekle ve sonraki URL'ye geÃ§
                    _ = semaphore.wait(timeout: .now() + 2)
                    
                    if logoLoaded {
                        break
                    }
                }
            }
            
            print("ğŸ“± Logo Ã¶nbelleÄŸe alma tamamlandÄ± - \(topCoins.count) coin iÃ§in")
        }
    }
} 